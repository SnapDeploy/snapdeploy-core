// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: repositories.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountRepositoriesByUserID = `-- name: CountRepositoriesByUserID :one
SELECT COUNT(*) FROM repositories
WHERE user_id = $1
`

func (q *Queries) CountRepositoriesByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountRepositoriesByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountSearchRepositoriesByUserID = `-- name: CountSearchRepositoriesByUserID :one
SELECT COUNT(*) FROM repositories
WHERE user_id = $1
  AND (
    name LIKE '%' || $2 || '%' OR
    full_name LIKE '%' || $2 || '%' OR
    description LIKE '%' || $2 || '%'
  )
`

type CountSearchRepositoriesByUserIDParams struct {
	UserID  uuid.UUID      `json:"user_id"`
	Column2 sql.NullString `json:"column_2"`
}

func (q *Queries) CountSearchRepositoriesByUserID(ctx context.Context, arg *CountSearchRepositoriesByUserIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountSearchRepositoriesByUserID, arg.UserID, arg.Column2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const DeleteRepository = `-- name: DeleteRepository :exec
DELETE FROM repositories
WHERE id = $1
`

func (q *Queries) DeleteRepository(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteRepository, id)
	return err
}

const GetRepositoriesByUserID = `-- name: GetRepositoriesByUserID :many
SELECT id, user_id, github_id, name, full_name, description, url, html_url, private, fork, stargazers_count, watchers_count, forks_count, default_branch, language, created_at, updated_at FROM repositories
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetRepositoriesByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetRepositoriesByUserID(ctx context.Context, arg *GetRepositoriesByUserIDParams) ([]*Repository, error) {
	rows, err := q.db.QueryContext(ctx, GetRepositoriesByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Repository{}
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GithubID,
			&i.Name,
			&i.FullName,
			&i.Description,
			&i.Url,
			&i.HtmlUrl,
			&i.Private,
			&i.Fork,
			&i.StargazersCount,
			&i.WatchersCount,
			&i.ForksCount,
			&i.DefaultBranch,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRepositoryByURL = `-- name: GetRepositoryByURL :one
SELECT id, user_id, github_id, name, full_name, description, url, html_url, private, fork, stargazers_count, watchers_count, forks_count, default_branch, language, created_at, updated_at FROM repositories
WHERE url = $1
`

func (q *Queries) GetRepositoryByURL(ctx context.Context, url string) (*Repository, error) {
	row := q.db.QueryRowContext(ctx, GetRepositoryByURL, url)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Description,
		&i.Url,
		&i.HtmlUrl,
		&i.Private,
		&i.Fork,
		&i.StargazersCount,
		&i.WatchersCount,
		&i.ForksCount,
		&i.DefaultBranch,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const SearchRepositoriesByUserID = `-- name: SearchRepositoriesByUserID :many
SELECT id, user_id, github_id, name, full_name, description, url, html_url, private, fork, stargazers_count, watchers_count, forks_count, default_branch, language, created_at, updated_at FROM repositories
WHERE user_id = $1
  AND (
    name LIKE '%' || $2 || '%' OR
    full_name LIKE '%' || $2 || '%' OR
    description LIKE '%' || $2 || '%'
  )
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type SearchRepositoriesByUserIDParams struct {
	UserID  uuid.UUID      `json:"user_id"`
	Column2 sql.NullString `json:"column_2"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchRepositoriesByUserID(ctx context.Context, arg *SearchRepositoriesByUserIDParams) ([]*Repository, error) {
	rows, err := q.db.QueryContext(ctx, SearchRepositoriesByUserID,
		arg.UserID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Repository{}
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GithubID,
			&i.Name,
			&i.FullName,
			&i.Description,
			&i.Url,
			&i.HtmlUrl,
			&i.Private,
			&i.Fork,
			&i.StargazersCount,
			&i.WatchersCount,
			&i.ForksCount,
			&i.DefaultBranch,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpsertRepository = `-- name: UpsertRepository :one
INSERT INTO repositories (
    user_id,
    github_id,
    name,
    full_name,
    description,
    url,
    html_url,
    private,
    fork,
    stargazers_count,
    watchers_count,
    forks_count,
    default_branch,
    language
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
)
ON CONFLICT (url) 
DO UPDATE SET
    name = EXCLUDED.name,
    full_name = EXCLUDED.full_name,
    description = EXCLUDED.description,
    html_url = EXCLUDED.html_url,
    private = EXCLUDED.private,
    fork = EXCLUDED.fork,
    stargazers_count = EXCLUDED.stargazers_count,
    watchers_count = EXCLUDED.watchers_count,
    forks_count = EXCLUDED.forks_count,
    default_branch = EXCLUDED.default_branch,
    language = EXCLUDED.language,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, user_id, github_id, name, full_name, description, url, html_url, private, fork, stargazers_count, watchers_count, forks_count, default_branch, language, created_at, updated_at
`

type UpsertRepositoryParams struct {
	UserID          uuid.UUID      `json:"user_id"`
	GithubID        int64          `json:"github_id"`
	Name            string         `json:"name"`
	FullName        string         `json:"full_name"`
	Description     sql.NullString `json:"description"`
	Url             string         `json:"url"`
	HtmlUrl         sql.NullString `json:"html_url"`
	Private         sql.NullBool   `json:"private"`
	Fork            sql.NullBool   `json:"fork"`
	StargazersCount sql.NullInt32  `json:"stargazers_count"`
	WatchersCount   sql.NullInt32  `json:"watchers_count"`
	ForksCount      sql.NullInt32  `json:"forks_count"`
	DefaultBranch   sql.NullString `json:"default_branch"`
	Language        sql.NullString `json:"language"`
}

func (q *Queries) UpsertRepository(ctx context.Context, arg *UpsertRepositoryParams) (*Repository, error) {
	row := q.db.QueryRowContext(ctx, UpsertRepository,
		arg.UserID,
		arg.GithubID,
		arg.Name,
		arg.FullName,
		arg.Description,
		arg.Url,
		arg.HtmlUrl,
		arg.Private,
		arg.Fork,
		arg.StargazersCount,
		arg.WatchersCount,
		arg.ForksCount,
		arg.DefaultBranch,
		arg.Language,
	)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GithubID,
		&i.Name,
		&i.FullName,
		&i.Description,
		&i.Url,
		&i.HtmlUrl,
		&i.Private,
		&i.Fork,
		&i.StargazersCount,
		&i.WatchersCount,
		&i.ForksCount,
		&i.DefaultBranch,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
